swagger: "2.0"
info:
  description: "Permite el registro de solicitud de Informe de Inspección de riesgo en la base datos DynamoDB AWS"
  version: "v1.0"
  title: "Registro de Solicitud Tramite Inspección Riesgo (InspRiesgoRegistroSolicitud)"
  contact: 
    email: "sopote@mapfre.com.pe"    
  license: 
      name: "Apache 2.0"
      url: "http://www.apache.org/licenses/LICENSE-2.0.html"    

schemes:
- "https"

x-amazon-apigateway-request-validators:
  body-validate:
    validateRequestBody: true
    validateRequestParameters: false

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: " \n
          { \n
            \"exito\": false,
            \"mensaje\": \"Error en el body enviado\",
            \"data\": \"\",
            \"errores\": [
              {
                \"codigo\": \"2\",
                \"mensaje\": \"Error de validación de datos.  campo: $context.error.validationErrorString \"
              }
            ]            
          }"

  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: " \n
          { \n
            \"exito\": false,
            \"mensaje\": \"Error en la operación\",
            \"data\": \"\",
            \"errores\": [
              {
                \"codigo\": \"1\",
                \"mensaje\": \"Error de validación de token, u acceso\"
              }
            ]
          }"

  UNAUTHORIZED:
    statusCode: 401
    responseTemplates:
      application/json: " \n
          { \n
            \"exito\": false,
            \"mensaje\": \"Error en el autorización\",
            \"data\": \"\",
            \"errores\":$context.error.messageString
          }"

          
securityDefinitions:
  autorizador:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri:
        Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaToken}/invocations"
      authorizerCredentials:
        Fn::GetAtt: "InspRiesgoRegistroSolicitudRole.Arn"
      authorizerResultTtlInSeconds: 300
      type: "token"
x-amazon-apigateway-request-validator: body-validate
paths:
  /:
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"
  /InspRiesgoRegistroSolicitud/registrar:
    options:
        consumes:
        - "application/json"
        produces:
        - "application/json" 
        responses:
          200:
            description: "200 response"
            schema:
              $ref: "#/definitions/Empty"
            headers:
              Access-Control-Allow-Origin:
                type: "string"
              Access-Control-Allow-Methods:
                type: "string"
              Access-Control-Allow-Headers:
                type: "string"
        x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: "200"
              responseParameters:
                method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          passthroughBehavior: "when_no_match"
          requestTemplates:
            application/json: "{\"statusCode\": 200}"
          type: "mock"
    post:
      tags: 
        - inspeccion-riesgo-registro-solicitud-cloud-service-handler      
      summary: "Registrar datos de la solicitud de inspeccion de riesgo"
      operationId: "registrarPaso4"
      description: "Permite agregar los datos de informe de inspección de riesgo del paso 4\n"
      security:
        - autorizador: []   
      consumes:
        - "application/json"
      produces:
        - "application/json"
      x-amazon-apigateway-request-validator: body-validate
      parameters:
        - name: solicitud
          in: body
          description: "Información de la Inspección a registrar"
          required: true
          schema:
            $ref: "#/definitions/Solicitud"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: "InspRiesgoRegistroSolicitudRole.Arn"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InspRiesgoRegistroSolicitudFunction.Arn}/invocations"
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: " \n
                #set ($root=$util.parseJson($input.json('$'))) \n
                #set ($body = $util.parseJson($root.body)) \n
                { \n
                  \"exito\": $body.exito, \n
                  \"mensaje\": \"$body.mensaje\", \n
                  \"data\": $body.data, \n
                  \"errores\": $body.errores \n
                }
              "
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        requestTemplates:
          application/json: " \n
          #set($allParams = $input.params()) \n
          #set($inputRoot = $input.json('$')) \n
           {
              \"action\": \"insertPaso\", \n
              \"params\" : { \n
                #foreach($type in $allParams.keySet()) \n
                #set($params = $allParams.get($type)) \n
                \"$type\" : { \n
                  #foreach($paramName in $params.keySet()) \n
                  \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\" \n
                  #if($foreach.hasNext),#end \n
                  #end \n
                } \n
                #if($foreach.hasNext),#end \n
                #end \n
              }, \n
              \"data\": $inputRoot \n
            }"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
      responses:
        200:
          description: "Operación exitosa"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: Bad Request
        # default:
        #   statusCode: 400
        #   responseParameters:
        #     method.response.header.test-method-response-header: "static value"
        #   description: "Error de authenticación"
        401:
          description: No autorizado
        403:
          description: Acceso Denegado
        500:
          description: "Error en el servidor"

definitions:
  Solicitud:
    type: object
    required:
      - DatosTramite
    properties:
      DatosTramite:
        $ref: "#/definitions/DatosTramite"
      grupoRamos:
        type: array
        items:
          $ref: "#/definitions/Ramos"
      contactoCliente:
        $ref: "#/definitions/ContactoCliente"
      valoresDeclarados:
        $ref: "#/definitions/ValoresDeclarados"

  DatosTramite:
    type: object
    required:
      - claveTramite
      - codAgente
      - correoInspector
    properties:
      claveTramite:
        type: string
      claveTramiteGeneral:
        type: string
      codEstadoTramite:
        type: string
      nombreEstadoTramite:
        type: string
      codTipoCotizacion:
        type: string
      tipoCotizacion:
        type: string
      codTipoDocumento:
        type: string
      tipoDocumento:
        type: string
      numeroDocumento:
        type: string
      nombreCliente:
        type: string
      codAgente:
        type: string
      nombreAgente:
        type: string
      codUsuario:
        type: string
      codInspector:
        type: string
      nombreUsuarioInspector:
        type: string
      correoInspector:
        type: string
      fechaSolicitud:
        type: string
      fechaEfecto:
        type: string
      fechaActualizacion:
        type: string
      fechaInspeccion:
        type: string
      fechaCarga:
        type: string
      fechaVencimiento:
        type: string
      oficina:
        type: string
      direccion:
        type: string

  Ramos:
    type: object
    properties:
      codigo:
        type: string
      descripcion:
        type: string

  ContactoCliente:
    type: object
    properties:
      nombre:
        type: string
      direccion:
        type: string
      telefono:
        type: string
      email:
        type: string
      valorizacion:
        type: string

  ValoresDeclarados:
    type: object
    properties:
      conceptEdificacion:
        type: string
      contenido:
        type: string
      existencias:
        type: string
      equiposMaquinaria:
        type: string

  Respuesta:
    type: object
    properties:
      exito:
        type: string
      mensaje:
        type: string
      data:
        type: object
      errores:
        type: string

  Empty:
    type: object
    title: "Empty Schema"
  